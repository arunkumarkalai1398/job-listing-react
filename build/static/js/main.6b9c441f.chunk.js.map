{"version":3,"sources":["components/Jobllist.js","App.js","serviceWorker.js","index.js","login-page.js"],"names":["Jobllist","props","job","store","btnnew","new","btnfeature","featured","tools","language","languages","aside","role","level","push","className","src","logo","alt","company","news","btnfeat","position","postedAt","contract","location","map","tag","onClick","handle","App","useState","Data","setData","pointer","setPointer","useEffect","data","includes","handleFilter","value","filter","da","filtering","length","t","some","index","key","id","Boolean","window","hostname","match","ReactDOM","render","exact","path","component","class","htmlFor","type","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b9c441f.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nexport default function Jobllist(props) {\r\n    let job=props.store;\r\n    let btnnew =job.new;\r\n    let btnfeature=job.featured;\r\n    let tools=job.tools;\r\n    let language=job.languages;\r\n    let aside= [job.role,job.level];\r\n    if(tools!==[]){\r\n        aside.push(...tools);\r\n    }\r\n    \r\n    if(language){\r\n        aside.push(...language);\r\n    }\r\n    \r\n let   news=(btnnew)=> {\r\n        if(btnnew){\r\n            return( <span className=\"h6 news   py-1 px-2 mx-1 text-light font-weight-bold teal lighten-2  \">New!</span>)\r\n        }\r\n        else{\r\n            return null\r\n        }\r\n     }\r\n     let btnfeat=(btnfeature)=> {\r\n        if(btnfeature){\r\n            return( <span className=\"h6  feat grey darken-2 mx-1 text-white py-1 px-2\">Featured</span>)\r\n        }\r\n        else{\r\n            return null\r\n        }\r\n     }\r\n  \r\n    let positions=() => {\r\nreturn (\r\n    <section className=\"gt d-inline-flex flex-lg-nowrap  flex-wrap\">    \r\n    {aside ? aside.map((tag)=>{\r\n return<span onClick={()=>props.handle(tag)}  className=\"teal lighten-5 hover tools teal-text font-weight-bold mb-2 p-2 mx-1 rounded\">{tag}</span>}):\"\"}\r\n \r\n</section>)\r\n}\r\n   \r\n  \r\n    return (\r\n        <section className=\"ds row \">\r\n            <article className=\"container\">\r\n      <section className=\"col-sm-12 \">\r\n          <article className={`my-3 pt-4  ` }>\r\n<article className={`row shadow  my-3 bg-white ${job.featured && \"asd\"} `}>\r\n<aside className=\"col-sm-2 image\">\r\n<img src={job.logo} alt={job.company}/>\r\n</aside>\r\n<aside className=\"col-sm pt-4\">\r\n<span className=\"h5 font-weight-bold teal-text   lighten-1\">{job.company}</span>\r\n     <span >{news(btnnew)}</span>\r\n    <span >{btnfeat(btnfeature)}</span> \r\n    <h4 className=\"font-weight-bold mt-3 tools\">\r\n        {job.position}\r\n    </h4>\r\n<p className=\"text-muted\">\r\n{job.postedAt} . {job.contract} . {job.location}\r\n</p>\r\n</aside>\r\n<aside className=\"col-sm \">\r\n{positions()}\r\n</aside>\r\n</article>\r\n          </article>\r\n      </section>\r\n      </article>\r\n      </section>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport data from '../src/Jsonfile/data.json';\nimport Job from './components/Jobllist'\nimport \"./App.css\"\nfunction App() {\n  const [Data,setData]=useState([]);\n  const [pointer,setPointer]=useState([]);\n  useEffect(()=> setData(data),[]);\n  const reduce=({role,level,tools,languages})=>{\n    if(pointer.length===0){\n      return true;\n    }\n    const t =[role,level];\n    if(tools){\n      t.push(...tools);\n  }\n  \n  if(languages){\n      t.push(...languages);\n  }\n  return t.some((data)=> pointer.includes(data)) \n  }\n\nconst handle =(tag)=>{\nif(pointer.includes(tag)) return;\n  setPointer([...pointer,tag]);\n}\nconst handleFilter = (value)=>{\n  setPointer(pointer.filter((da)=> da!==value))\n}\nconst cleardata=()=>{\n  setPointer([]);\n}\n  const filtering=Data.filter(reduce);\n  return (\n    <div className=\"App container\">\n      <div >\n<p className=\"container\">{pointer.length>0 &&(\n    <p  className=\"bg-white row \">\n<div className=\"  col-sm w-75 col-md-8 p-1  \">\n    {pointer.map((value)=>{\n return (\n   <span className=\"filteration my-1  px-1\">\n    <span className=\"teal lighten-5 d-inline-flex flex-wrap  teal-text font-weight-bold mt-2  p-1  rounded\" onClick={()=>handleFilter(value)}> {value}</span>\n      <span className=\"teal Darken-2 mt-3 p-1  text-white\"onClick={()=>handleFilter(value)}> X</span>\n     \n    </span>\n\n    )\n    })}</div>\n     <span className=\"d-flex col-sm justify-content-end  font-weight-bold h4 erase text-center\" onClick={cleardata}>clear</span>\n    </p>\n    )}\n</p>  \n</div>\n    <p>\n    {filtering.map((data,index) => {\n        return (<div className=\"\">\n  <Job store={data} key={data.id} handle={handle}/>\n        </div>    \n        )\n    })\n    }\n\n</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Loginpage from './login-page';\nimport { Route, Switch } from 'react-router';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  \n    <div className=\"index-bg\">\n    <h2 className=\"navs no-glutters\"></h2>\n    <BrowserRouter>\n <Switch>\n   <Route  exact path=\"/\" component={Loginpage} />\n   <Route exact  path=\"/dashboard\" component={App} />\n </Switch>\n </BrowserRouter>\n    </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Link} from 'react-router-dom';\r\nexport default function loginpage() {\r\n    return (\r\n        <section className=\"container  \">\r\n                <form  className=\"white dt container px-5 w-50 card \">\r\n                <i class=\"fas fa-user-circle center\"></i>\r\n                    <h4 className=\"grey-text pt-4 text-darken-3 text-center m-2\">Login</h4>\r\n                    <div className=\"input-field \">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" />\r\n                    </div>\r\n                    <div className=\"input-field \">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <div className=\"input-field center\">          \r\n<Link to=\"/dashboard\" class=\"waves-effect waves-light teal lighten-1 text-white  btn\">Login</Link>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n    )\r\n}\r\n"],"sourceRoot":""}